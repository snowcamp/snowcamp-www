---
import Utils from '../utils';
const lang = Utils.getLang(Astro.url);
interface ShortStep {
  title: string;
  date: string;
  description?: string;
}
interface LongStep {
  title: string;
  begin: string;
  end: string;
  description?: string;
}
type Step = ShortStep | LongStep;

interface Props {
  tl: Step[];
}

const { tl } = Astro.props;

const instantFormat = Intl.DateTimeFormat(lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const startFormatSnowcamp = Intl.DateTimeFormat(lang, {
  month: 'short',
  day: 'numeric',
});
const endFormatSnowcamp = Intl.DateTimeFormat(lang, {
  year: 'numeric',
  month: 'short',
  day: 'numeric',
});

function instant(step: any): step is ShortStep {
  return (step as ShortStep).date !== undefined;
}

function long(step: any): step is LongStep {
  return (step as LongStep).begin !== undefined;
}

function prepare(step: Step) {
  let formatedDate = '';
  let end = 0;
  if (instant(step)) {
    formatedDate = instantFormat.format(Utils.parseDate(step.date));
    end = Utils.parseDate(step.date).getTime();
  } else if (long(step)) {
    formatedDate = `${startFormatSnowcamp.format(Utils.parseDate(step.begin))} - ${endFormatSnowcamp.format(Utils.parseDate(step.end))}`;
    end = Utils.parseDate(step.end).getTime();
  }
  return {
    title: step.title,
    date: formatedDate,
    description: step.description,
    finished: new Date().getTime() > end,
  };
}
const timeline = tl.map((step) => prepare(step));
---
<style>
  :root {
    --tl-border-size: 1px;
    --tl-padding-size: 1px;
  }
  .timeline {
    display: flex;
    flex-direction: row;
    width: fit-content;
    justify-content: space-evenly;
    grid-template-columns: repeat(auto-fill, minmax(10em, auto));
    gap: 30px;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2rem;
    padding: 0 1fr;
  }

  h2 {
    font-size: 24px;
    color: var(--orange);
  }

  p {
    max-width: max-content;
  }

  .step {
    position: relative;
    padding: 20px;
    display: inline-block;
    border-width: var(--tl-border-size);
    border-color: var(--orange);
    border-style: solid;
    border-radius: 5%;
    height: 6rem;
    min-width: max-content;
  }
  .step.finished {
    background-color: var(--orange);
    color: var(--background);
    * {
      background-color: var(--orange);
      color: var(--background);
    }
  }
  .step:not(:last-child)::after {
    content: "";
    position: absolute;
    top: 50%;
    right: -20px;
    transform: translateY(-50%);

    /* arrow */
    width: 0;
    height: 0;
    border-top: 10px solid transparent;
    border-bottom: 10px solid transparent;
    border-left: 10px solid #333;
  }
  .title {
    color: var(--orange);
    margin: 0;
  }
</style>
<div style="display: flex; flex-direction: row; align-items: center">
<div class="timeline">
  { timeline.map((step) => (
    <div class={step.finished ? 'step finished' : 'step'}>
      <p class="title">{step.title}</p>
      <p>{step.date}</p>
      <p>{step.description}</p>
    </div>
  )) }
</div>
</div>
